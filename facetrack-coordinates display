import cv2
import numpy as np
import time

classifierFace = cv2.CascadeClassifier(haarcascade_frontalface_default.xml)

videoCam = cv2.VideoCapture(0)

if not videoCam.isOpened():
    print("The camera is not accessible")
    exit()

buttonispressed = False
while buttonispressed == False:
    ret, framework = videoCam.read()

    if ret == True:
        gray = cv2.cvtColor(framework, cv2.COLOR_BGR2GRAY)
        dafFace = classifierFace.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=2)

        for (x, y, w, h) in dafFace:
            # Draw the rectangle
            cv2.rectangle(framework, (x, y), (x + w, y + h), (0, 255, 0), 2)

            # Calculate the center coordinates
            cx = x + w // 2
            cy = y + h // 2

            # Mark the center with a small circle
            cv2.circle(framework, (cx, cy), 5, (0, 0, 255), -1)

            # Display the center coordinates as text
            center_text = f"Center: ({cx}, {cy})"
            font = cv2.FONT_HERSHEY_SIMPLEX
            cv2.putText(framework, center_text, (cx - 100, cy - 20), font, 0.8, (255, 0, 0), 2)

        # Display the number of faces detected
        teks = "Number of Persons Detected = " + str(len(dafFace))
        font = cv2.FONT_HERSHEY_SIMPLEX
        cv2.putText(framework, teks, (0, 30), font, 1, (255, 0, 0), 1)

        # Show the result
        cv2.imshow("Results", framework)
        
        # Break the loop when 'p' is pressed
        if cv2.waitKey(1) & 0xFF == ord('p'):
            buttonispressed = True
            break

# Release resources
videoCam.release()
cv2.destroyAllWindows()
